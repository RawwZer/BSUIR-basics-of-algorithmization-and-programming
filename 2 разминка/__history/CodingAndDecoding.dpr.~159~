program CodingAndDecoding;

uses
  SysUtils;

procedure GettingRandom(var Res: boolean);
var
  i: integer;
Begin
  Randomize;

  i := Random(10) - Random(10);

  if odd(i) then
    Res := False
  Else
    Res := True;
End;

procedure Swap(var symbol_1, symbol_2: char);
var
  buf: char;
begin
  buf := symbol_1;
  symbol_1 := symbol_2;
  symbol_2 := buf;
end;

procedure SetMatrixLength(var s: string);
var
  i, n, len: integer;
Begin
  len := Length(s);
  n := round(sqrt(len));
  While not odd(n) or (n * n < len) do
    inc(n);

  setlength(s, n * n);
  for i := len + 1 to n * n do
    s[i] := ' ';
End;

function LoadTextFromFile(FName: String): String;
var
  FFromUser: TextFile;
Begin
{$I-}
  AssignFile(FFromUser, FName);
  Reset(FFromUser);
{$I+}
  if IOResult <> 0 then
    Writeln('Неверный путь/название файла!')
  else
  begin
    Readln(FFromUser, Result);
    CloseFile(FFromUser);
    Writeln('Полученный текст:');
    Writeln(Result);
  end;
End;

procedure Coding(var TextFUser: String; Bname: String);
type
  TDirection = (Up = 0, Right, Down, Left);
var
  i, j, n, k, b, centre, cycles, raws: integer;
  DClockwise, change: boolean;
  Direction, Start: TDirection;
  ResOfCycle: String;
  ResF: TextFile;

begin
  Randomize;

  n := Length(TextFUser);
  raws := round(sqrt(n));
  centre := round((n + 1) / 2);
  cycles := Random(19) + 1;

  setlength(ResOfCycle, n);

  AssignFile(ResF, Bname);
  Rewrite(ResF);

  GettingRandom(DClockwise);
  DClockwise := true;
  // 11
  Writeln(ResF, 'Clockwise: ', DClockwise);
  // 18
  Writeln(ResF, 'Number of cycles: ', cycles);
  Writeln('Число проходов: ', cycles);

  for j := 1 to 1 do
  Begin
    // Direction := TDirection(Random(3));
    Direction := up;
    Start := Direction;
    ResOfCycle[1] := TextFUser[centre];
    case Direction of
      Up:
        begin
          k := centre - raws;
          Writeln(ResF, 'U');
        end;
      Right:
        begin
          k := centre + 1;
          Writeln(ResF, 'R');
        end;
      Down:
        begin
          k := centre + raws;
          Writeln(ResF, 'D');
        end;
      Left:
        begin
          k := centre - 1;
          Writeln(ResF, 'L');
        end;
    end;
    ResOfCycle[2] := TextFUser[k];
    if DClockwise then
    Begin
      If Direction <> high(TDirection) then
        inc(Direction)
      Else
        Direction := Low(TDirection)
    End
    Else
    Begin
      if Direction <> Low(TDirection) then
        dec(Direction)
      Else
        Direction := High(TDirection);
    End;
    i := 3;
    b := 1;

    While i <= n do
    begin
      change := False;
      case Direction of
        Up:
          if (k - raws) < (centre - raws * b - b) then
            change := True
          else
            k := k - raws;
        Right:
          if (k = (centre - raws * b + b)) or (k = (centre + raws * b + b)) or
            (k = (centre + b)) then
          Begin
            change := True;
            If (Direction = Start) and (k mod raws <> 0) then
            Begin
              k := k + 1;
              ResOfCycle[i] := TextFUser[k];
              inc(i);
              inc(b);
            End;
          End
          else
            k := k + 1;
        Down:
          if ((k + raws) > (centre + raws * b + b)) then
            change := True
          else
            k := k + raws;
        Left:
          if (k = (centre - raws * b - b)) or (k = (centre + raws * b - b)) or
            (k = (centre - b)) then
          Begin
            change := True;
            If (Direction = Start) and ((k - 1) mod raws <> 0) then
            Begin
              k := k - 1;
              ResOfCycle[i] := TextFUser[k];
              inc(i);
              inc(b);
            End;
          End
          else
            k := k - 1;
      end;

      if change then
      Begin
        if DClockwise then
        Begin
          If Direction <> high(TDirection) then
            inc(Direction)
          Else
            Direction := Low(TDirection)
        End
        Else
        Begin
          if Direction <> Low(TDirection) then
            dec(Direction)
          Else
            Direction := High(TDirection);
        End;
        If (Direction = Start) and ((Start = Down) or (Start = Up)) then
          inc(b);
      End
      else
      Begin
        ResOfCycle[i] := TextFUser[k];
        inc(i);
      End;

    end;

    TextFUser := ResOfCycle;
  End;

  Writeln(ResF, TextFUser);
  CloseFile(ResF);
end;

function LoadAttrOfCode(FName: String; out AmountCycles: integer;
  out Clockwise: boolean): boolean;
var
  FForLoad: TextFile;
  i: integer;
  TextFUser: String;
Begin
{$I-}
  AssignFile(FForLoad, FName);
  Reset(FForLoad);

  Result := True;

  Readln(FForLoad, TextFUser);
  If Copy(TextFUser, 12, 1) = 'F' then
    Clockwise := True
  Else if Copy(TextFUser, 12, 1) = 'T' then
    Clockwise := False
  Else
    Result := False;

  Readln(FForLoad, TextFUser);
  Val(Copy(TextFUser, 19), AmountCycles, i);
  If i <> 0 then
    Result := False;
  CloseFile(FForLoad);
{$I+}
  if (IOResult <> 0) or not Result then
    Writeln('Некорректный файл для декодирования!')
End;

function Decoding(FName, Bname: String): String;
type
  TDirection = (Up = 1, Right, Down, Left);
var
  i, j, n, k, centre, cycles, raws: integer;
  DClockwise, change: boolean;
  Direction: TDirection;
  ResOfCycle, TextFUser: String;
  GavenF, ResF: TextFile;
  ArrOfDir: array of byte;
begin
{$I-}
  AssignFile(GavenF, FName);
  Reset(GavenF);

  Readln(GavenF, TextFUser);
  If Copy(TextFUser, 12, 1) = 'F' then
    DClockwise := False
  Else if Copy(TextFUser, 12, 1) = 'T' then
    DClockwise := True
  Else
    change := False;

  Readln(GavenF, TextFUser);
  Val(Copy(TextFUser, 19), cycles, i);
  If i <> 0 then
    change := False;
{$I+}
  if (IOResult <> 0) or not change then
    Writeln('Некорректный файл для декодирования!')
  Else
  Begin
    setlength(ArrOfDir, cycles);
    for i := 0 to cycles - 1 do
    Begin
      Readln(GavenF, TextFUser);
      if TextFUser = 'U' then
        ArrOfDir[i] := 1
      else if TextFUser = 'R' then
        ArrOfDir[i] := 2
      else if TextFUser = 'D' then
        ArrOfDir[i] := 3
      else if TextFUser = 'L' then
        ArrOfDir[i] := 4;
    End;

    Readln(GavenF, TextFUser);
    n := Length(TextFUser);
    raws := round(sqrt(n));
    centre := round((n + 1) / 2);
    CloseFile(GavenF);

    setlength(ResOfCycle, n);
    for j := 1 to cycles do
    Begin
      ResOfCycle[centre] := TextFUser[1];
      Direction := TDirection(ArrOfDir[cycles - j]);
      case Direction of
        Up:
          k := centre - raws;
        Right:
          k := centre + 1;
        Down:
          k := centre + raws;
        Left:
          k := centre - 1;
      end;
      ResOfCycle[k] := TextFUser[2];
      i := 3;

      While i <= n do
      begin
        change := False;
        case Direction of
          Up:
            if k <= raws then
              change := True
            else
              k := k - raws;
          Right:
            if k mod raws = 0 then
              change := True
            else
              k := k + 1;
          Down:
            if k > (n - raws) then
              change := True
            else
              k := k + raws;
          Left:
            if (k - 1) mod raws = 0 then
              change := True
            else
              k := k - 1;
        end;

        if change then
          if DClockwise then
          Begin
            If Direction <> high(TDirection) then
              inc(Direction)
            Else
              Direction := Low(TDirection)
          End
          Else
          Begin
            if Direction <> Low(TDirection) then
              dec(Direction)
            Else
              Direction := High(TDirection);
          End
        else
        Begin
          ResOfCycle[k] := TextFUser[i];
          inc(i);
        End;
      end;

      TextFUser := ResOfCycle;
    End;
    AssignFile(ResF, Bname);
    Rewrite(ResF);
    Result := TextFUser;
    Writeln(ResF, TextFUser);
    CloseFile(ResF);
  End;

end;

var
  FFromUser, FFromProgram: TextFile;
  Answer, Text, TypeC, FName: String;
  WrongAnswer: boolean;

const
  BNameCode = 'coded.txt';
  BNameDecode = 'decoded.txt';

begin
  SetCurrentDir('D:\Универ\Разминки\Файлики');
  Repeat
    Writeln('Выполнить кодирование (code) или декодирование (decode) ?');
    Readln(TypeC);
    WrongAnswer := True;
    if (TypeC = 'code') or (TypeC = 'decode') then
    begin
      Writeln('Введите имя текстового файла, располагающегося в следующей');
      Writeln('директории: "D:\Универ\Разминки\Файлики"');
      Readln(Text);
      if TypeC = 'code' then
      Begin
        // Кодирование
        Text := LoadTextFromFile(Text + '.txt');
        SetMatrixLength(Text);
        Coding(Text, BNameCode);
        Writeln('Результат кодирования:');
        FName := BNameCode;
      End
      Else if TypeC = 'decode' then
      Begin
        Text := Decoding(Text + '.txt', BNameDecode);
        Writeln('Результат декодирования:');
        FName := BNameDecode;
      End;
      Text := StringReplace(Text, ' ', '', [rfReplaceAll]);
      Writeln(Text);
      WrongAnswer := False;
    end
    Else
      Writeln('Такой функции нет! Попробуйте еще раз!');

  Until not WrongAnswer;

  // Сохранение
  Write('Сохранить в файл? (Y/N): ');
  Readln(Answer);
  if Answer = 'Y' then
  begin
    Writeln('Введите имя файла, под которым хотите сохранить');
    Writeln(TypeC, 'd текст (enter, если ', FName, ')');
    Readln(Answer);
    If not(Answer = '') then
      ReNameFile(FName, Answer + '.txt');
    Writeln(TypeC, 'd запись сохранена');
  End
  Else
    DeleteFile(FName);

  Readln;

end.
