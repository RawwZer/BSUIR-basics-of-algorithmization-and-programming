program Вычитание_2;
{
  Substracting two numbers (around 255 digits in each)
}

uses
  System.SysUtils;

var
  Num_1, Num_2, Check: shortstring;
  I, j, Z1, Z2, K: integer;
  L: boolean;
  ArrayOfSub: array [1 .. 255] of integer;
  // Num_1, Num_2 - numbers, which must be added
  // I, J, K - auxiliary variables for counting
  // Z1, Z2 - variable of sign of numbers
  // Check - variable for keeping the value of the first number
  // ArrayOfSub - array to substract Num_1 and Num_2
  // L - variable to check for errors

const
  LengthA = length(ArrayOfSub) + 1;
  // LengthA - Length ArrayOfSum

begin

  // Requiring numbers
  Repeat
    Write('Введите первое число: ');
    readln(Num_1);

    // Checking for sign of the first number
    if Num_1[1] = '-' then
    Begin
      Delete(Num_1, 1, 1);
      Z1 := -1;
    End
    else
      Z1 := 1;

    Write('Введите второе число: ');
    readln(Num_2);

    // Checking for sign of the second number
    if Num_2[1] = '-' then
    Begin
      Delete(Num_2, 1, 1);
      Z2 := -1;
    End
    else
      Z2 := 1;

    if (length(Num_1) < length(Num_2)) and (Z1 = 1) then
      // As we swap, then the final sign will be negative
      Check := '-';

    if (Z1 = -1) and (Z2 = -1) then
      // As we swap, then the final sign will be negative
      Check := '-';

    j := length(Num_1);

    // Trying convert string of the first number to array of it
    Try
      begin

        // Checking for the biggest number and adding it to array
        if (length(Num_1) = length(Num_2)) and (Z1 = 1) and (Z2 = 1) then
        Begin

          Repeat
            I := I + 1
          Until (StrtoInt(Num_1[I]) < StrtoInt(Num_2[I])) or
            (I = length(Num_1));

          if I < length(Num_1) then
            // As we swap, then the final sign will be negative
            Check := '-';
        End;

        j := length(Num_1);

        for I := (LengthA - 1) downto (LengthA - length(Num_1)) do
        Begin
          ArrayOfSub[I] := StrtoInt(Num_1[j]);

          j := j - 1;
        End;

        L := True;
      end;
    except
      on e: EConvertError do
      begin
        Writeln('Вы ввели не число! Повторите попытку!');
        Writeln('');

        L := False;
      end;

    End;
  Until L;

  j := length(Num_2);
  I := (LengthA - 1);

  While I >= (LengthA - length(Num_2)) do
  Begin

    // A new rank of the sub
    If ArrayOfSub[I] = -10 then
    Begin
      ArrayOfSub[I] := 0;
      ArrayOfSub[I-1] := ArrayOfSub[I-1] - 1;
    End;

    If ArrayOfSub[I] = 10 then
    Begin
      ArrayOfSub[I] := 0;
      ArrayOfSub[I-1] := ArrayOfSub[I-1] + 1;
    End;

    // If the second number isn't over
    If j <> 0 then
    begin

      // If we need to get a rank from the next one
      If (ArrayOfSub[I] < StrtoInt(Num_2[j])) and (Z2 = 1) then
      Begin

        // if the next on is zero  and we again need a rank
        if ArrayOfSub[I-1] = 0 then
        Begin

          // Trying to find the rank, which isn't zero
          while (ArrayOfSub[I-K] <= 0) and
            ((LengthA-I+K+1) <= length(Num_1)) do
          Begin
            K := K + 1;
            ArrayOfSub[I-K] := ArrayOfSub[I-K] - 1;
            ArrayOfSub[I+1-K] := ArrayOfSub[I+1-K] + 10;
          End;
        End
        Else
        Begin

          // Getting a rank from th next one and
          // substracting it
          ArrayOfSub[I-1] := ArrayOfSub[I-1] - 1;
          ArrayOfSub[I] := ArrayOfSub[I] + 10;
        End;
      End;
      if (Z2 = -1) and (Z1 = 1) then
        ArrayOfSub[I] := ArrayOfSub[I] + StrtoInt(Num_2[j]);

      ArrayOfSub[I] := ArrayOfSub[I] - StrtoInt(Num_2[j]);

      // If the digit is negative to deleting the sign
      if (ArrayOfSub[I] < 0) and (I > (LengthA - length(Num_2))) then
        ArrayOfSub[I] := -ArrayOfSub[I];

      j := j - 1;
    end;

    I := I - 1;
  End;

  // Recreating the sign of the numbers
  if Z1 = -1 then
    Insert('-', Num_1, 1);
  if Z2 = -1 then
    Insert('-', Num_2, 1);

  Write('Разность чисел ', Num_1, ' и ', Num_2, ' равна ', Check);

  // Finding a border of length of the sub
  If length(Num_2) > length(Num_1) then
    j := (LengthA - length(Num_2)) - 1
  Else
    j := (LengthA - length(Num_1)) - 1;

  if ArrayOfSub[j] = 0 then
    While ArrayOfSub[j] = 0 do
      j := j + 1;

  // Outputting the sub
  for I := j to (LengthA - 1) do
    Write(ArrayOfSub[I]);

  readln;

end.
